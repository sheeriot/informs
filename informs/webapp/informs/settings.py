"""
Django settings for informs project.

Generated by 'django-admin startproject' using Django 5.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
import configparser
# from icecream import ic

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Create logs directory path
LOGS_DIR = BASE_DIR / 'logs'

# Ensure logs directory exists
LOGS_DIR.mkdir(exist_ok=True)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/
ENV_NAME = os.environ.get('ENV_NAME', 'sand')

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
if os.environ.get('DJANGO_DEBUG') == 'False':
    DEBUG = False
else:
    DEBUG = True

SERVERNAME1 = os.environ.get('SERVERNAME1', 'localhost')
SERVERNAME2 = os.environ.get('SERVERNAME2', 'localhost')

ALLOWED_HOSTS = ["127.0.0.1", "localhost", SERVERNAME1, SERVERNAME2]

SITE_ID = 1

# Read version from file
# try:
#     # Corrected path for within the Docker container
#     with open(os.path.join(BASE_DIR, 'app_version.txt'), 'r') as f:
#         APP_VERSION = f.read().strip()
# except FileNotFoundError:
#     APP_VERSION = '1.0'
STATIC_VERSION = "1.2"
APP_VERSION = STATIC_VERSION

# CSRF settings
CSRF_TRUSTED_ORIGINS = []

# Add servernames only if they're not localhost (avoid duplicates)
if SERVERNAME1 and SERVERNAME1 != 'localhost':
    CSRF_TRUSTED_ORIGINS.extend([
        'https://' + SERVERNAME1,
        'http://' + SERVERNAME1,
    ])

if SERVERNAME2 and SERVERNAME2 != 'localhost':
    CSRF_TRUSTED_ORIGINS.extend([
        'https://' + SERVERNAME2,
        'http://' + SERVERNAME2,
    ])

# Always include localhost origins
CSRF_TRUSTED_ORIGINS.extend([
    'http://127.0.0.1',
    'http://localhost',
])

CSRF_COOKIE_SECURE = False if DEBUG else True
CSRF_COOKIE_SAMESITE = 'Lax'
CSRF_USE_SESSIONS = False
CSRF_COOKIE_HTTPONLY = False
CSRF_HEADER_NAME = 'HTTP_X_CSRFTOKEN'
CSRF_COOKIE_NAME = 'csrftoken'

# CORS Settings
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOWED_ORIGINS = CSRF_TRUSTED_ORIGINS
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

if DEBUG:
    CORS_ALLOW_ALL_ORIGINS = True
    CSRF_TRUSTED_ORIGINS.extend(['http://localhost:*', 'http://127.0.0.1:*'])

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sites',
    # 'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_bootstrap_icons',
    'django_q',
    'django_filters',
    # 'debug_toolbar',
    'auditlog',
    'tz_detect',
    'crispy_forms',
    'crispy_bootstrap5',
    'mathfilters',
    'corsheaders',
    'widget_tweaks',
    'accounts.apps.AccountsConfig',
    'aidrequests.apps.AidRequestsConfig',
    'takserver.apps.TakServerConfig'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'debug_toolbar.middleware.DebugToolbarMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'auditlog.middleware.AuditlogMiddleware',
    'tz_detect.middleware.TimezoneMiddleware',
]

ROOT_URLCONF = 'informs.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR / 'informs' / 'templates',
            BASE_DIR / 'templates',
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.static',
                'informs.context_processors.server_hostname',
                'aidrequests.context_processors.fieldops_active',
                'aidrequests.context_processors.basevars',
                'aidrequests.context_processors.field_op_context',
                'informs.context_processors.app_version',
            ],
            'builtins': [
                'django.templatetags.static',
            ],
        },
    },
]

WSGI_APPLICATION = 'informs.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

SQLITE_FILE = os.environ.get('SQLITE_FILE', BASE_DIR / 'db.sqlite3')

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        # 'NAME': BASE_DIR / 'db.sqlite3',
        'NAME': SQLITE_FILE
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 8,
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = '/opt/app/static_files/'

STATICFILES_DIRS = [
    BASE_DIR / 'static'
]

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Crispy Template Pack
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"

# Sessions
SESSION_ENGINE = "django.contrib.sessions.backends.file"
SESSION_COOKIE_AGE = 1 * 24 * 60 * 60  # 1 day cookie
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
SESSION_COOKIE_SECURE = False if DEBUG else True  # Set to False for HTTP in development

DATA_UPLOAD_MAX_NUMBER_FIELDS = 500
DATA_UPLOAD_MAX_MEMORY_SIZE = 5242880  # 5MB max upload size

# BOOTSTRAP5 = {
#     "css_url": {
#         "href": "{% static 'css/custom-bootstrap.css' %}",  # your custom CSS file
#     },
# }

# Authentication settings
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'
LOGIN_URL = '/accounts/login/'

# MAPS
AZURE_MAPS_STATIC_URL = 'https://atlas.microsoft.com/map/static'
MAPS_PATH = 'media/maps'

# django-q configuration
Q_CLUSTER = {
    'name': 'ORM',
    'workers': 1,
    'timeout': 180,
    'retry': 300,
    'queue_limit': 500,
    'bulk': 10,
    'orm': 'default',
    # 'sync': DEBUG,
    'scheduler': True,
    'catch_up': False,
    'label': 'Default ORM Queue'
}

# Email settings
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = os.environ.get('EMAIL_HOST')
EMAIL_PORT = os.environ.get('EMAIL_PORT')
EMAIL_USE_TLS = os.environ.get('EMAIL_USE_TLS', 'True').lower() in ['true', '1']
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')
DEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL')
REPLY_TO_EMAIL = os.environ.get('REPLY_TO_EMAIL')

MESSAGE_STORAGE = 'django.contrib.messages.storage.session.SessionStorage'

# Cache
# CACHES = {
#     'default': {
#         'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
#         'LOCATION': 'unique-snowflake',
#     }
# }

# Logging
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
        'cot_format': {
            'format': '[{asctime}] {message}',
            'style': '{',
            'datefmt': '%Y-%m-%d %H:%M:%S'
        }
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose'
        },
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': os.path.join(LOGS_DIR, 'app.log'),
            'formatter': 'verbose',
        },
        'cot_file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': os.path.join(LOGS_DIR, 'cot_messages.log'),
            'formatter': 'cot_format',
        },
        "null": {
            "class": "logging.NullHandler",
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': True,
        },
        'cot': {
            'handlers': ['cot_file', 'console'],
            'level': 'INFO',
            'propagate': False,
        },
        "django.security.DisallowedHost": {
            "handlers": ["null"],
            "propagate": False,
        },
    },
}

# Custom Settings
# Load the INI file
# config = configparser.ConfigParser()
# # config.read(os.path.join(BASE_DIR, 'settings.ini'))
# config_file = os.environ.get('INFORMS_CONFIG_FILE')
# if config_file:
#     config.read(config_file)
# else:
#     print("INFORMS_CONFIG_FILE environment variable not set.")
#     # Handle the absence of the config file, e.g., by setting default values or raising an error

# Azure Maps API key
AZURE_MAPS_KEY = os.environ.get('AZURE_MAPS_KEY', '')

# CoT Icon settings
icons_config = configparser.ConfigParser()
# icons_config.read(os.path.join(BASE_DIR, 'takserver/cot_icons.ini'))
# COT_ICON_ZIP_FILE = os.path.join(BASE_DIR, 'takserver/cot_icons.zip')
# COT_ICONS = {key: value for key, value in icons_config.items('Icons')}
# # ic(COT_ICONS)
COT_ICONS = {}
